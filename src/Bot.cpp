#include "Server.hpp"
#include <iostream>
#include <string>
#include <unistd.h>

void Server::tellLittleRedRidingHood(int fd) {
  std::string lines[] = {
      "Un jour, une petite fille en capuchon rouge part porter un panier\n",
      "de provisions √† sa grand-m√®re malade. En chemin, elle rencontre un\n",
      "loup rus√© qui lui propose un d√©fi : arrivera-t-elle chez sa\n",
      "grand-m√®re plus vite que lui ? La petite fille s'arr√™te pour cueillir\n",
      "des fleurs, et le loup arrive le premier. Il se d√©guise en "
      "grand-m√®re,\n",
      "mais gr√¢ce √† l'aide d'un chasseur courageux, le loup est vaincu, et\n",
      "tout finit bien.\n"};

  for (size_t i = 0; i < sizeof(lines) / sizeof(lines[0]); ++i) {
    std::string message_compose = ":bot PRIVMSG " +
                                  _clients.getClient(fd)->nickname + " :" +
                                  lines[i] + "\n";
    _clients.msgClient(message_compose, _clients.getClient(fd)->nickname, fd);
  }
}

void Server::tellThreeLittlePigs(int fd) {
  std::string lines[] = {
      "Trois petits cochons d√©cident de construire chacun une maison pour se\n",
      "prot√©ger du grand m√©chant loup. Le premier construit en paille, le\n",
      "second en bois, et le troisi√®me en briques. Le loup souffle sur les\n",
      "deux premi√®res maisons et les d√©truit, mais il ne peut rien contre la\n",
      "maison de briques. Les cochons apprennent l'importance de travailler\n",
      "dur et de bien se pr√©parer.\n"};

  for (size_t i = 0; i < sizeof(lines) / sizeof(lines[0]); ++i) {
    std::string message_compose = ":bot PRIVMSG " +
                                  _clients.getClient(fd)->nickname + " :" +
                                  lines[i] + "\n";
    _clients.msgClient(message_compose, _clients.getClient(fd)->nickname, fd);
  }
}

void Server::tellUglyDuckling(int fd) {
  std::string lines[] = {
      "Un caneton au plumage terne est moqu√© par les autres animaux. Il se\n",
      "sent seul et triste jusqu'√† ce qu'il d√©couvre, en grandissant, qu'il\n",
      "est en r√©alit√© un magnifique cygne. Cette histoire enseigne que la\n",
      "beaut√© int√©rieure et la patience permettent d'affronter les d√©fis\n",
      "de la vie.\n"};

  for (size_t i = 0; i < sizeof(lines) / sizeof(lines[0]); ++i) {
    std::string message_compose = ":bot PRIVMSG " +
                                  _clients.getClient(fd)->nickname + " :" +
                                  lines[i] + "\n";
    _clients.msgClient(message_compose, _clients.getClient(fd)->nickname, fd);
  }
}

void Server::tellLittleMermaid(int fd) {
  std::string lines[] = {
      "Ariel, une jeune sir√®ne, r√™ve de d√©couvrir le monde des humains. Elle\n",
      "sauve un prince d'un naufrage et tombe amoureuse. Elle √©change sa "
      "voix\n",
      "contre des jambes aupr√®s d'une sorci√®re des mers. Malgr√© de nombreux\n",
      "obstacles, Ariel prouve que le courage et l'amour sinc√®re sont les\n",
      "plus grandes forces.\n"};

  for (size_t i = 0; i < sizeof(lines) / sizeof(lines[0]); ++i) {
    std::string message_compose = ":bot PRIVMSG " +
                                  _clients.getClient(fd)->nickname + " :" +
                                  lines[i] + "\n";
    _clients.msgClient(message_compose, _clients.getClient(fd)->nickname, fd);
  }
}

void Server::tellSnowWhite(int fd) {
  std::string lines[] = {
      "Une jeune princesse, Blanche-Neige, est jalous√©e par sa belle-m√®re,\n",
      "la m√©chante reine, √† cause de sa beaut√©. Chass√©e de chez elle, elle\n",
      "trouve refuge chez sept nains adorables. Mais la reine, d√©guis√©e, lui\n",
      "offre une pomme empoisonn√©e. Heureusement, un prince la r√©veille avec\n",
      "un baiser d'amour sinc√®re, et ils vivent heureux pour toujours.\n"};

  for (size_t i = 0; i < sizeof(lines) / sizeof(lines[0]); ++i) {
    std::string message_compose = ":bot PRIVMSG " +
                                  _clients.getClient(fd)->nickname + " :" +
                                  lines[i] + "\n";
    _clients.msgClient(message_compose, _clients.getClient(fd)->nickname, fd);
  }
}

void Server::tellHareAndTortoise(int fd) {
  std::string lines[] = {
      "Dans cette fable de La Fontaine, un li√®vre arrogant d√©fie une tortue\n",
      "lente √† une course. S√ªr de gagner, le li√®vre fait une sieste en\n",
      "chemin, tandis que la tortue avance lentement mais s√ªrement. La "
      "tortue\n",
      "finit par remporter la course, montrant que la pers√©v√©rance est plus\n",
      "importante que la vitesse.\n"};

  for (size_t i = 0; i < sizeof(lines) / sizeof(lines[0]); ++i) {
    std::string message_compose = ":bot PRIVMSG " +
                                  _clients.getClient(fd)->nickname + " :" +
                                  lines[i] + "\n";
    _clients.msgClient(message_compose, _clients.getClient(fd)->nickname, fd);
  }
}

void Server::tellHanselAndGretel(int fd) {
  std::string lines[] = {
      "Un fr√®re et une s≈ìur, Hansel et Gretel, se perdent dans la for√™t et\n",
      "d√©couvrent une maison en pain d'√©pices. Mais la maison appartient √†\n",
      "une sorci√®re qui veut les d√©vorer. Gr√¢ce √† leur courage et √† leur\n",
      "intelligence, ils r√©ussissent √† s'√©chapper et √† retrouver leur chemin\n",
      "vers leur maison, plus unis que jamais.\n"};

  for (size_t i = 0; i < sizeof(lines) / sizeof(lines[0]); ++i) {
    std::string message_compose = ":bot PRIVMSG " +
                                  _clients.getClient(fd)->nickname + " :" +
                                  lines[i] + "\n";
    _clients.msgClient(message_compose, _clients.getClient(fd)->nickname, fd);
  }
}

void Server::tellPussInBoots(int fd) {
  std::string lines[] = {
      "Un jeune homme h√©rite d'un chat rus√© et intelligent. Ce chat, avec "
      "ses\n",
      "bottes et son esprit vif, aide son ma√Ætre √† devenir riche et "
      "respect√©.\n",
      "Gr√¢ce √† des stratag√®mes habiles, il impressionne un roi, conquiert un\n",
      "ch√¢teau et fait en sorte que son ma√Ætre √©pouse une princesse.\n"};

  for (size_t i = 0; i < sizeof(lines) / sizeof(lines[0]); ++i) {
    std::string message_compose = ":bot PRIVMSG " +
                                  _clients.getClient(fd)->nickname + " :" +
                                  lines[i] + "\n";
    _clients.msgClient(message_compose, _clients.getClient(fd)->nickname, fd);
  }
}

void Server::displayWelcomeMessage(int fd) {
  std::string lines[] = {
      "******************************************************",
      "*                                                    *",
      "*       üåü Bienvenue sur le Bot d'Histoires üåü       *",
      "*                                                    *",
      "*    Ici, vous pourrez √©couter de magnifiques        *",
      "*    histoires pour petits et grands !               *",
      "*                                                    *",
      "******************************************************",
      "",
      "üìö S√©lectionnez une histoire parmi les options ci-dessous :",
      "",
      "[0] Le Petit Chaperon Rouge",
      "[1] Les Trois Petits Cochons",
      "[2] Le Vilain Petit Canard",
      "[3] La Petite Sir√®ne",
      "[4] Blanche-Neige",
      "[5] Le Li√®vre et la Tortue",
      "[6] Hansel et Gretel",
      "[7] Le Chat Bott√©",
      "",
      "******************************************************",
      "",
      "üîí **R√©pondez en message priv√© pour choisir une histoire !** üîí"};

  for (size_t i = 0; i < sizeof(lines) / sizeof(lines[0]); ++i) {
    std::string message_compose = ":bot PRIVMSG " +
                                  _clients.getClient(fd)->nickname + " :" +
                                  lines[i] + "\n";
    _clients.msgClient(message_compose, _clients.getClient(fd)->nickname, fd);
  }
}

void Server::botResponse(const std::string &msg, int fd) {
  std::stringstream ss(msg);
  int choice;
  ss >> choice;

  if (ss.fail() || !ss.eof()) {
    displayWelcomeMessage(fd);
    return;
  }

  switch (choice) {
  case 0:
    tellLittleRedRidingHood(fd);
    break;
  case 1:
    tellThreeLittlePigs(fd);
    break;
  case 2:
    tellUglyDuckling(fd);
    break;
  case 3:
    tellLittleMermaid(fd);
    break;
  case 4:
    tellSnowWhite(fd);
    break;
  case 5:
    tellHareAndTortoise(fd);
    break;
  case 6:
    tellHanselAndGretel(fd);
    break;
  case 7:
    tellPussInBoots(fd);
    break;
  default:
    displayWelcomeMessage(fd);
  }
}
