## TODO List - JOIN Command Implementation

### **Classes à créer ou compléter**

1. **Channel**
   - Représente un channel IRC avec ses propriétés et méthodes.
   - Méthodes nécessaires :
     - `bool isBanned(const std::string& nickname) const`
       - Vérifie si un utilisateur est banni du channel.
     - `bool isFull() const`
       - Vérifie si le channel a atteint sa capacité maximale.
     - `bool isInviteOnly() const`
       - Indique si le channel est en mode "invitation uniquement".
     - `bool isInvited(const std::string& nickname) const`
       - Vérifie si un utilisateur est invité dans le channel.
     - `bool hasKey() const`
       - Indique si une clé est nécessaire pour rejoindre le channel.
     - `bool checkKey(const std::string& key) const`
       - Vérifie si la clé fournie est correcte.
     - `void addUser(const ClientManager& client)`
       - Ajoute un utilisateur au channel.
     - `std::string getTopic() const`
       - Retourne le sujet du channel.

2. **Server**
   - Représente le serveur IRC et gère les channels et les utilisateurs.
   - Méthodes nécessaires :
     - `Channel* findChannel(const std::string& channelName)`
       - Recherche un channel par son nom.
     - `int getMaxChannelsPerUser() const`
       - Retourne le nombre maximum de channels qu'un utilisateur peut rejoindre.

3. **ClientManager**
   - Gère les informations sur un utilisateur connecté.
   - Méthodes nécessaires :
     - `std::string getNickname() const`
       - Retourne le pseudo de l'utilisateur.
     - `int getJoinedChannelsCount() const`
       - Retourne le nombre de channels que l'utilisateur a déjà rejoints.
     - `void sendMessage(const std::string& message)`
       - Envoie un message à l'utilisateur.

### **Fonctions à implémenter**

1. **`validateJoin`**
   - Gère la logique de validation pour la commande `JOIN`.
   - Conditions à vérifier :
     - Si aucun argument n'est fourni :
       ```cpp
       throw std::runtime_error("error_461"); // ERR_NEEDMOREPARAMS
       ```
     - Si le nom du channel est invalide :
       ```cpp
       throw std::runtime_error("error_476"); // ERR_BADCHANMASK
       ```
     - Si le channel n'existe pas :
       ```cpp
       throw std::runtime_error("error_403"); // ERR_NOSUCHCHANNEL
       ```
     - Si l'utilisateur est banni :
       ```cpp
       throw std::runtime_error("error_474"); // ERR_BANNEDFROMCHAN
       ```
     - Si le channel est plein :
       ```cpp
       throw std::runtime_error("error_471"); // ERR_CHANNELISFULL
       ```
     - Si le channel est en mode "invitation uniquement" :
       ```cpp
       throw std::runtime_error("error_473"); // ERR_INVITEONLYCHAN
       ```
     - Si une clé est requise et incorrecte :
       ```cpp
       throw std::runtime_error("error_475"); // ERR_BADCHANNELKEY
       ```
     - Si l'utilisateur a rejoint trop de channels :
       ```cpp
       throw std::runtime_error("error_405"); // ERR_TOOMANYCHANNELS
       ```

2. **`handleJoinSuccess`**
   - Gère les réponses à envoyer après une validation réussie de la commande `JOIN`.
   - Réponses nécessaires :
     - Si le channel a un sujet défini :
       ```cpp
       client.sendMessage("rpl_332"); // RPL_TOPIC
       ```
     - Liste des utilisateurs dans le channel :
       ```cpp
       client.sendMessage("rpl_353"); // RPL_NAMREPLY
       ```
     - Fin de la liste des noms :
       ```cpp
       client.sendMessage("rpl_366"); // RPL_ENDOFNAMES
       ```

### **Tests à prévoir**

1. **Cas d'erreurs :**
   - Aucun argument fourni (`ERR_NEEDMOREPARAMS`).
   - Nom de channel invalide (`ERR_BADCHANMASK`).
   - Channel inexistant (`ERR_NOSUCHCHANNEL`).
   - Utilisateur banni (`ERR_BANNEDFROMCHAN`).
   - Channel plein (`ERR_CHANNELISFULL`).
   - Channel en mode "invitation uniquement" sans invitation (`ERR_INVITEONLYCHAN`).
   - Clé incorrecte pour un channel protégé (`ERR_BADCHANNELKEY`).
   - Utilisateur ayant rejoint trop de channels (`ERR_TOOMANYCHANNELS`).

2. **Cas de succès :**
   - Rejoindre un channel existant.
   - Rejoindre un channel avec un sujet défini (`RPL_TOPIC`).
   - Vérifier que les utilisateurs du channel sont listés (`RPL_NAMREPLY`).